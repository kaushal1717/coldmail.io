generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  uid           String    @id @default(auto()) @map("_id") @db.ObjectId
  id            String    @unique
  email         String    @unique
  image         String?
  emails        Email[]
  savedEmails   Int       @default(0)
  totalEmails   Int       @default(0)
  subscription  String    @default("free")
  maxCapacity   Boolean   @default(false)
  name          String
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // New workspace relations
  ownedWorkspaces      Workspace[]       @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMember[]
  reviewRequests       ReviewRequest[]   @relation("ReviewRequester")
  assignedReviews      ReviewRequest[]   @relation("ReviewReviewer")
  
  // Notification relations
  sentNotifications    Notification[]    @relation("NotificationSender")
  receivedNotifications Notification[]   @relation("NotificationReceiver")
  
  // Workspace invitation relations
  sentInvitations      WorkspaceInvitation[] @relation("InvitationSender")
  receivedInvitations  WorkspaceInvitation[] @relation("InvitationReceiver")

  @@map("user")
}

model Email {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  author           User   @relation(fields: [authorId], references: [id])
  authorId         String 
  content          String
  category         String
  subject          String
  uniqueIdentifier String
  
  // New workspace fields
  workspaceId      String?          @db.ObjectId
  workspace        Workspace?       @relation(fields: [workspaceId], references: [id])
  isPublic         Boolean          @default(false)
  reviewRequests   ReviewRequest[]
  
  @@index([authorId])
}

model Workspace {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  slug        String            @unique
  ownerId     String   
  owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  
  // Relations
  members     WorkspaceMember[]
  emails      Email[]
  invitations WorkspaceInvitation[]
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("workspace")
}

model WorkspaceMember {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        String    @default("member") // "owner", "admin", "member"
  
  joinedAt    DateTime  @default(now())
  
  @@unique([userId, workspaceId])
  @@map("workspace_member")
}

model ReviewRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  emailId     String   @db.ObjectId
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  requesterId String   
  requester   User     @relation("ReviewRequester", fields: [requesterId], references: [id])
  reviewerId  String   
  reviewer    User     @relation("ReviewReviewer", fields: [reviewerId], references: [id])
  
  status      String   @default("pending") // "pending", "approved", "rejected"
  message     String?  // Optional message from requester
  response    String?  // Reviewer's feedback
  
  requestedAt DateTime @default(now())
  reviewedAt  DateTime?
  
  @@map("review_request")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String    
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // "review_request", "review_response", "workspace_invitation"
  title       String
  message     String
  read        Boolean  @default(false)
  
  // Relations
  senderId    String?
  sender      User?    @relation("NotificationSender", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("NotificationReceiver", fields: [receiverId], references: [id])
  
  // Related entities (optional, based on notification type)
  reviewRequestId      String?  @db.ObjectId
  workspaceInvitationId String? @db.ObjectId
  workspaceId          String?  @db.ObjectId
  emailId              String?  @db.ObjectId
  
  // Metadata
  data        Json?    // Additional data for the notification
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("notification")
}

model WorkspaceInvitation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  role        String    @default("member") // "member", "admin"
  status      String    @default("pending") // "pending", "accepted", "rejected", "expired"
  message     String?   // Optional message from inviter
  
  // Relations
  workspaceId String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviterId   String
  inviter     User      @relation("InvitationSender", fields: [inviterId], references: [id])
  inviteeId   String?   // null if user doesn't exist yet
  invitee     User?     @relation("InvitationReceiver", fields: [inviteeId], references: [id])
  
  // Expiration
  expiresAt   DateTime
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([email, workspaceId])
  @@map("workspace_invitation")
}
